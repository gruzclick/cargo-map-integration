import { useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import Icon from '@/components/ui/icon';

interface Message {
  role: 'user' | 'assistant';
  content: string;
}

const predefinedAnswers: Record<string, string> = {
  '–∫–∞–∫ –Ω–∞–π—Ç–∏ –≥—Ä—É–∑': '–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≥—Ä—É–∑: 1) –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å "–°–≤–æ–±–æ–¥–µ–Ω" 2) –£–∫–∞–∂–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –≤ –ø–æ–ª–µ "–ü–æ–∏—Å–∫ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É" 3) –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –≥—Ä—É–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ç–æ–≤—ã –≤–µ–∑—Ç–∏ 4) –ù–∞ –∫–∞—Ä—Ç–µ –ø–æ—è–≤—è—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≥—Ä—É–∑—ã',
  '–∫–∞–∫ –Ω–∞–π—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª—è': '–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª—è: 1) –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ (–≥–æ—Ç–æ–≤/–±—É–¥–µ—Ç –≥–æ—Ç–æ–≤) 2) –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ 3) –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ 4) –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞ 5) –ù–∞ –∫–∞—Ä—Ç–µ –æ—Ç–æ–±—Ä–∞–∑—è—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–æ–¥–∏—Ç–µ–ª–∏',
  '—á—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —Ü–≤–µ—Ç–∞': '–¶–≤–µ—Ç–∞ –º–∞—Ä–∫–µ—Ä–æ–≤: üü¢ –ó–µ–ª—ë–Ω—ã–π ‚Äî —Å–≤–æ–±–æ–¥–µ–Ω/–≥–æ—Ç–æ–≤ –∫ –æ—Ç–≥—Ä—É–∑–∫–µ, üü° –ñ—ë–ª—Ç—ã–π ‚Äî –µ—Å—Ç—å –º–µ—Å—Ç–∞/–±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫–æ –≤—Ä–µ–º–µ–Ω–∏, üî¥ –ö—Ä–∞—Å–Ω—ã–π ‚Äî –Ω–µ—Ç –º–µ—Å—Ç/–∑–∞–Ω—è—Ç',
  '–∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç': '–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –≤ –ø–æ–ª—è—Ö "–û—Ç–∫—É–¥–∞" –∏ "–ö—É–¥–∞", –∑–∞—Ç–µ–º —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" —Å–æ –∑–≤—ë–∑–¥–æ—á–∫–æ–π. –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ.',
  '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è': '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ú–æ—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è" ‚Äî —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∂–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ –≥—Ä—É–∑—ã –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π.',
  '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è': '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í—Ö–æ–¥ / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—â–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.',
};

const AIAssistant = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      role: 'assistant',
      content: '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –ì—Ä—É–∑ –ö–ª–∏–∫ üëã –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ä–∞–±–æ—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –∏ —è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è!'
    }
  ]);
  const [input, setInput] = useState('');

  const quickQuestions = [
    '–ö–∞–∫ –Ω–∞–π—Ç–∏ –≥—Ä—É–∑?',
    '–ö–∞–∫ –Ω–∞–π—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª—è?',
    '–ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —Ü–≤–µ—Ç–∞?',
    '–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç?'
  ];

  const handleSend = (question?: string) => {
    const userMessage = question || input;
    if (!userMessage.trim()) return;

    const newMessages: Message[] = [
      ...messages,
      { role: 'user', content: userMessage }
    ];

    const lowerQuestion = userMessage.toLowerCase();
    let answer = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—ã—à–µ.';

    for (const [key, value] of Object.entries(predefinedAnswers)) {
      if (lowerQuestion.includes(key)) {
        answer = value;
        break;
      }
    }

    newMessages.push({ role: 'assistant', content: answer });
    setMessages(newMessages);
    setInput('');
  };

  if (!isOpen) {
    return (
      <Button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-4 right-4 z-50 h-14 w-14 rounded-full shadow-2xl animate-bounce"
        size="icon"
      >
        <Icon name="MessageCircle" size={24} />
      </Button>
    );
  }

  return (
    <Card className="fixed bottom-4 right-4 z-50 w-96 max-w-[calc(100vw-2rem)] shadow-2xl animate-scale-in">
      <CardContent className="p-0">
        <div className="bg-primary text-primary-foreground p-4 rounded-t-xl flex items-center justify-between">
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
              <Icon name="Bot" size={18} />
            </div>
            <div>
              <h3 className="font-semibold text-sm">AI –ü–æ–º–æ—â–Ω–∏–∫</h3>
              <p className="text-xs opacity-90">–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏</p>
            </div>
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsOpen(false)}
            className="h-8 w-8 p-0 hover:bg-white/20"
          >
            <Icon name="X" size={18} />
          </Button>
        </div>

        <div className="h-96 overflow-y-auto p-4 space-y-3 bg-gray-50 dark:bg-gray-900">
          {messages.map((msg, idx) => (
            <div
              key={idx}
              className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-[80%] rounded-xl p-3 text-sm ${
                  msg.role === 'user'
                    ? 'bg-primary text-primary-foreground'
                    : 'bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700'
                }`}
              >
                {msg.content}
              </div>
            </div>
          ))}

          {messages.length === 1 && (
            <div className="space-y-2">
              <p className="text-xs text-center text-muted-foreground mb-2">–ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</p>
              {quickQuestions.map((q, idx) => (
                <Button
                  key={idx}
                  variant="outline"
                  size="sm"
                  onClick={() => handleSend(q)}
                  className="w-full justify-start text-xs h-auto py-2"
                >
                  {q}
                </Button>
              ))}
            </div>
          )}
        </div>

        <div className="p-3 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-950">
          <div className="flex gap-2">
            <Input
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSend()}
              placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å..."
              className="text-sm"
            />
            <Button onClick={() => handleSend()} size="sm" className="shrink-0">
              <Icon name="Send" size={16} />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default AIAssistant;
