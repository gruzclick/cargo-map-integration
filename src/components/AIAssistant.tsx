import { useState, useRef, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import Icon from '@/components/ui/icon';

interface Message {
  role: 'user' | 'assistant';
  content: string;
}

const ALLOWED_TOPICS = [
  '–∫–∞–∫ –Ω–∞–π—Ç–∏ –≥—Ä—É–∑',
  '–∫–∞–∫ –Ω–∞–π—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª—è',
  '—á—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —Ü–≤–µ—Ç–∞',
  '–∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç',
  '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è',
  '–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞—Ä—Ç–æ–π',
  '–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã',
  '–∫–∞–∫ –∏—Å–∫–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã',
  '—Å—Ç–∞—Ç—É—Å—ã',
  '–ø–æ–º–æ—â—å',
  '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
  '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∞–π—Ç',
  '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
  '—Ñ—É–Ω–∫—Ü–∏–∏'
];

const predefinedAnswers: Record<string, string> = {
  '–∫–∞–∫ –Ω–∞–π—Ç–∏ –≥—Ä—É–∑': '–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≥—Ä—É–∑: 1) –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å–ª–µ–≤–∞ 2) –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ü–æ–∏—Å–∫" 3) –£–∫–∞–∂–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç "–û—Ç–∫—É–¥–∞" –∏ "–ö—É–¥–∞" 4) –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –≥—Ä—É–∑–æ–≤ 5) –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –≥—Ä—É–∑—ã –ø–æ—è–≤—è—Ç—Å—è –Ω–∞ –∫–∞—Ä—Ç–µ',
  '–∫–∞–∫ –Ω–∞–π—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª—è': '–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª—è: 1) –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å 2) –í–∫–ª–∞–¥–∫–∞ "–ü–æ–∏—Å–∫" 3) –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ 4) –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ 5) –ù–∞ –∫–∞—Ä—Ç–µ –ø–æ—è–≤—è—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏',
  '—á—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —Ü–≤–µ—Ç–∞': '–¶–≤–µ—Ç–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ: üü¢ –ó–µ–ª—ë–Ω—ã–π ‚Äî —Å–≤–æ–±–æ–¥–µ–Ω/–≥–æ—Ç–æ–≤, üü° –ñ—ë–ª—Ç—ã–π ‚Äî –µ—Å—Ç—å –º–µ—Å—Ç–∞/—Å–∫–æ—Ä–æ –≥–æ—Ç–æ–≤, üî¥ –ö—Ä–∞—Å–Ω—ã–π ‚Äî –∑–∞–Ω—è—Ç/–Ω–µ—Ç –º–µ—Å—Ç',
  '–∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç': '–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –≤ –ø–æ–ª—è—Ö "–û—Ç–∫—É–¥–∞" –∏ "–ö—É–¥–∞" –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ü–æ–∏—Å–∫". –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–æ –∑–≤—ë–∑–¥–æ—á–∫–æ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.',
  '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è': '–ù–∞–∂–º–∏—Ç–µ –∫—Ä—É–≥–ª—É—é –∫–Ω–æ–ø–∫—É —Å –ø—Ä–∏—Ü–µ–ª–æ–º –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∫–∞—Ä—Ç—ã. –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.',
  '–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞—Ä—Ç–æ–π': '–ù–∞ –∫–∞—Ä—Ç–µ: –∫–Ω–æ–ø–∫–∞ —Å–ª–µ–≤–∞ –≤–≤–µ—Ä—Ö—É ‚Äî –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å, –∫–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∞ ‚Äî –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –∫–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞ ‚Äî AI –ø–æ–º–æ—â–Ω–∏–∫. –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∏–º–µ–µ—Ç 2 –≤–∫–ª–∞–¥–∫–∏: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ü–æ–∏—Å–∫.',
  '–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã': '–û—Ç–∫—Ä–æ–π—Ç–µ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å–ª–µ–≤–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ü–æ–∏—Å–∫". –¢–∞–º –≤—ã –Ω–∞–π–¥—ë—Ç–µ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã: –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –º–∞—Ä—à—Ä—É—Ç—ã, —Ç–∏–ø—ã –≥—Ä—É–∑–æ–≤ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.',
  '–∫–∞–∫ –∏—Å–∫–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã': '–í–æ –≤–∫–ª–∞–¥–∫–µ "–ü–æ–∏—Å–∫" –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è "–û—Ç–∫—É–¥–∞" –∏ "–ö—É–¥–∞". –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≥—Ä—É–∑—ã/–≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ.',
  '—Å—Ç–∞—Ç—É—Å—ã': '–°—Ç–∞—Ç—É—Å—ã: üü¢ –°–≤–æ–±–æ–¥–µ–Ω/–ì–æ—Ç–æ–≤ üü° –ï—Å—Ç—å –º–µ—Å—Ç–∞/–°–∫–æ—Ä–æ –≥–æ—Ç–æ–≤ üî¥ –ó–∞–Ω—è—Ç/–ù–µ—Ç –º–µ—Å—Ç. –ú–µ–Ω—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å—ã –≤–æ –≤–∫–ª–∞–¥–∫–µ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞".',
  '–ø–æ–º–æ—â—å': '–Ø –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∫–∞—Ä—Ç—ã –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º!',
  '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ': '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä—É–∑—ã –∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ.',
  '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∞–π—Ç': '–°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞: –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –ø–∞–Ω–µ–ª—å —Å–ª–µ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å–ø—Ä–∞–≤–∞, –æ–±—â–∞–π—Ç–µ—Å—å —Å–æ –º–Ω–æ–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É AI –≤–Ω–∏–∑—É.',
  '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è': '–û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏: 1) –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å 2) –í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É (–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞/–ü–æ–∏—Å–∫) 3) –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã 4) –°–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ 5) –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª–µ–π',
  '—Ñ—É–Ω–∫—Ü–∏–∏': '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: –ø–æ–∏—Å–∫ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º, –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–æ–≤, –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç–µ.'
};

const sanitizeInput = (input: string): string => {
  return input
    .toLowerCase()
    .replace(/<script[^>]*>.*?<\/script>/gi, '')
    .replace(/<[^>]+>/g, '')
    .replace(/javascript:/gi, '')
    .replace(/on\w+\s*=/gi, '')
    .trim()
    .slice(0, 200);
};

const isAllowedQuestion = (question: string): boolean => {
  const sanitized = sanitizeInput(question);
  return ALLOWED_TOPICS.some(topic => sanitized.includes(topic));
};

const AIAssistant = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      role: 'assistant',
      content: 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞—Ä—Ç–æ–π –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º. –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞!'
    }
  ]);
  const [input, setInput] = useState('');
  const [isListening, setIsListening] = useState(false);
  const recognitionRef = useRef<any>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      recognitionRef.current.lang = 'ru-RU';

      recognitionRef.current.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript;
        setInput(transcript);
        setIsListening(false);
      };

      recognitionRef.current.onerror = () => {
        setIsListening(false);
      };

      recognitionRef.current.onend = () => {
        setIsListening(false);
      };
    }
  }, []);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const quickQuestions = [
    '–ö–∞–∫ –Ω–∞–π—Ç–∏ –≥—Ä—É–∑?',
    '–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞—Ä—Ç–æ–π?',
    '–ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —Ü–≤–µ—Ç–∞?',
    '–ö–∞–∫ –∏—Å–∫–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã?'
  ];

  const handleVoiceInput = () => {
    if (!recognitionRef.current) {
      alert('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
      return;
    }

    if (isListening) {
      recognitionRef.current.stop();
    } else {
      recognitionRef.current.start();
      setIsListening(true);
    }
  };

  const handleSend = (question?: string) => {
    const userMessage = question || input;
    if (!userMessage.trim()) return;

    const sanitized = sanitizeInput(userMessage);
    
    if (!isAllowedQuestion(sanitized)) {
      const warningMessages: Message[] = [
        ...messages,
        { role: 'user', content: userMessage },
        { 
          role: 'assistant', 
          content: '‚ö†Ô∏è –Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞—Ä—Ç–æ–π –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å –≤—ã—à–µ!' 
        }
      ];
      setMessages(warningMessages);
      setInput('');
      return;
    }

    const newMessages: Message[] = [
      ...messages,
      { role: 'user', content: userMessage }
    ];

    let answer = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å –≤—ã—à–µ!';

    for (const [key, value] of Object.entries(predefinedAnswers)) {
      if (sanitized.includes(key)) {
        answer = value;
        break;
      }
    }

    newMessages.push({ role: 'assistant', content: answer });
    setMessages(newMessages);
    setInput('');
  };

  if (!isOpen) {
    return (
      <button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-4 right-4 z-50 px-4 py-3 bg-white/15 dark:bg-gray-900/15 backdrop-blur-3xl border border-white/40 dark:border-gray-700/40 shadow-2xl rounded-full hover:bg-white/25 dark:hover:bg-gray-900/25 active:scale-95 transition-all flex items-center gap-2"
      >
        <Icon name="HelpCircle" size={18} className="text-gray-900 dark:text-white" />
        <span className="text-sm font-medium text-gray-900 dark:text-white">–°–ø—Ä–∞–≤–∫–∞</span>
      </button>
    );
  }

  return (
    <Card className="fixed bottom-4 right-4 z-50 w-96 max-w-[calc(100vw-2rem)] shadow-2xl animate-scale-in">
      <CardContent className="p-0">
        <div className="bg-primary text-primary-foreground p-4 rounded-t-xl flex items-center justify-between">
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
              <Icon name="Bot" size={18} />
            </div>
            <div>
              <h3 className="font-semibold text-sm">–°–ø—Ä–∞–≤–∫–∞</h3>
              <p className="text-xs opacity-90">–í–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</p>
            </div>
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsOpen(false)}
            className="h-8 w-8 p-0 hover:bg-white/20"
          >
            <Icon name="X" size={18} />
          </Button>
        </div>

        <div className="h-96 overflow-y-auto p-4 space-y-3 bg-white/5 dark:bg-gray-900/5">
          {messages.map((msg, idx) => (
            <div
              key={idx}
              className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-[80%] rounded-xl p-3 text-sm ${
                  msg.role === 'user'
                    ? 'bg-gradient-to-br from-blue-500 to-purple-600 text-white'
                    : 'bg-white/40 dark:bg-gray-800/40 backdrop-blur-sm border border-white/30 dark:border-gray-700/30 text-gray-900 dark:text-white'
                }`}
              >
                {msg.content}
              </div>
            </div>
          ))}
          <div ref={messagesEndRef} />

          {messages.length === 1 && (
            <div className="space-y-2">
              <p className="text-xs text-center text-muted-foreground mb-2">–ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</p>
              {quickQuestions.map((q, idx) => (
                <Button
                  key={idx}
                  variant="outline"
                  size="sm"
                  onClick={() => handleSend(q)}
                  className="w-full justify-start text-xs h-auto py-2"
                >
                  {q}
                </Button>
              ))}
            </div>
          )}
        </div>

        <div className="p-3 border-t border-white/20 dark:border-gray-700/20 bg-white/10 dark:bg-gray-900/10">
          <div className="flex gap-2">
            <Input
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSend()}
              placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å..."
              className="text-sm bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm border-white/40 dark:border-gray-700/40"
              maxLength={200}
            />
            <Button 
              onClick={handleVoiceInput} 
              size="sm" 
              variant={isListening ? "destructive" : "outline"}
              className="shrink-0"
            >
              <Icon name={isListening ? "MicOff" : "Mic"} size={16} />
            </Button>
            <Button onClick={() => handleSend()} size="sm" className="shrink-0">
              <Icon name="Send" size={16} />
            </Button>
          </div>
          <p className="text-[10px] text-gray-600 dark:text-gray-400 mt-1 text-center">
            üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          </p>
        </div>
      </CardContent>
    </Card>
  );
};

export default AIAssistant;