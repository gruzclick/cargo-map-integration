'''
Business: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –±–∏–æ–º–µ—Ç—Ä–∏—è, –ì–æ—Å—É—Å–ª—É–≥–∏, SMS 2FA, JWT, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
Args: event - dict with httpMethod, body (action, params)
      context - object with request_id
Returns: HTTP response with security operation result
'''

import json
import hashlib
import random
import time
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os
from datetime import datetime, timedelta
from typing import Dict, Any

sms_codes: Dict[str, str] = {}
email_codes: Dict[str, Dict[str, Any]] = {}
rate_limit_storage: Dict[str, list] = {}
failed_login_attempts: Dict[str, Dict[str, Any]] = {}
reset_tokens: Dict[str, Dict[str, Any]] = {}

def check_rate_limit(ip_address: str, max_requests: int = 100, window_seconds: int = 60) -> bool:
    current_time = time.time()
    
    if ip_address not in rate_limit_storage:
        rate_limit_storage[ip_address] = []
    
    rate_limit_storage[ip_address] = [
        req_time for req_time in rate_limit_storage[ip_address] 
        if current_time - req_time < window_seconds
    ]
    
    if len(rate_limit_storage[ip_address]) >= max_requests:
        return False
    
    rate_limit_storage[ip_address].append(current_time)
    return True

def check_login_attempts(user_id: str) -> Dict[str, Any]:
    current_time = time.time()
    
    if user_id in failed_login_attempts:
        attempt_data = failed_login_attempts[user_id]
        
        if attempt_data['blocked_until'] > 0:
            return {
                'blocked': True,
                'message': '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ 5 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ email.'
            }
    
    return {'blocked': False}

def record_failed_login(user_id: str) -> bool:
    current_time = time.time()
    
    if user_id not in failed_login_attempts:
        failed_login_attempts[user_id] = {'count': 0, 'last_attempt': current_time, 'blocked_until': 0}
    
    failed_login_attempts[user_id]['count'] += 1
    failed_login_attempts[user_id]['last_attempt'] = current_time
    
    if failed_login_attempts[user_id]['count'] >= 5:
        failed_login_attempts[user_id]['blocked_until'] = 1
        return True
    
    return False

def generate_reset_token(email: str) -> str:
    token = hashlib.sha256(f"{email}{time.time()}{random.randint(1000, 9999)}".encode()).hexdigest()[:32]
    reset_tokens[token] = {
        'email': email,
        'created_at': time.time(),
        'expires_at': time.time() + 3600
    }
    return token

def verify_reset_token(token: str) -> Dict[str, Any]:
    if token not in reset_tokens:
        return {'valid': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è'}
    
    token_data = reset_tokens[token]
    if time.time() > token_data['expires_at']:
        del reset_tokens[token]
        return {'valid': False, 'message': '–¢–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç—ë–∫'}
    
    return {'valid': True, 'email': token_data['email']}

def unlock_account(user_id: str):
    if user_id in failed_login_attempts:
        failed_login_attempts[user_id] = {'count': 0, 'last_attempt': time.time(), 'blocked_until': 0}

def send_email_code(email: str, code: str) -> bool:
    try:
        smtp_host = os.environ.get('SMTP_HOST', 'smtp.gmail.com')
        smtp_port = int(os.environ.get('SMTP_PORT', '587'))
        smtp_user = os.environ.get('SMTP_USER', '')
        smtp_password = os.environ.get('SMTP_PASSWORD', '')
        
        if not smtp_user or not smtp_password:
            print('SMTP credentials not configured')
            return False
        
        msg = MIMEMultipart('alternative')
        msg['Subject'] = '–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
        msg['From'] = smtp_user
        msg['To'] = email
        
        html_body = f'''
        <html>
            <body style="font-family: Arial, sans-serif; padding: 20px;">
                <div style="max-width: 600px; margin: 0 auto; background: #f5f5f5; padding: 30px; border-radius: 10px;">
                    <h2 style="color: #333;">üîê –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h2>
                    <p style="font-size: 16px; color: #666;">–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–æ–∫:</p>
                    <div style="background: white; padding: 20px; border-radius: 8px; text-align: center; margin: 20px 0;">
                        <h1 style="font-size: 48px; letter-spacing: 10px; color: #4CAF50; margin: 0;">{code}</h1>
                    </div>
                    <p style="font-size: 14px; color: #999;">–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.</p>
                    <p style="font-size: 14px; color: #999;">–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∫–æ–¥, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
                </div>
            </body>
        </html>
        '''
        
        text_body = f'–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}\n\n–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.'
        
        part1 = MIMEText(text_body, 'plain')
        part2 = MIMEText(html_body, 'html')
        
        msg.attach(part1)
        msg.attach(part2)
        
        with smtplib.SMTP(smtp_host, smtp_port) as server:
            server.starttls()
            server.login(smtp_user, smtp_password)
            server.send_message(msg)
        
        return True
    except Exception as e:
        print(f'Error sending email: {str(e)}')
        return False

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, X-User-Id, X-Auth-Token',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    if method == 'POST':
        request_context = event.get('requestContext', {})
        identity = request_context.get('identity', {})
        source_ip: str = identity.get('sourceIp', 'unknown')
        
        if not check_rate_limit(source_ip):
            return {
                'statusCode': 429,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({'error': '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (100/–º–∏–Ω)'}),
                'isBase64Encoded': False
            }
        
        body_data = json.loads(event.get('body', '{}'))
        action: str = body_data.get('action', '')
        
        if action == 'biometric_register':
            user_id: str = body_data.get('user_id', '')
            biometric_token: str = body_data.get('biometric_token', '')
            biometric_hash = hashlib.sha256(biometric_token.encode()).hexdigest()
            
            return {
                'statusCode': 200,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({
                    'success': True,
                    'message': '–ë–∏–æ–º–µ—Ç—Ä–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞',
                    'user_id': user_id,
                    'biometric_hash': biometric_hash
                }),
                'isBase64Encoded': False
            }
        
        elif action == 'biometric_verify':
            return {
                'statusCode': 200,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({
                    'success': True,
                    'verified': True,
                    'message': '–ë–∏–æ–º–µ—Ç—Ä–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞'
                }),
                'isBase64Encoded': False
            }
        
        elif action == 'gosuslugi_verify':
            passport_series: str = body_data.get('passport_series', '')
            passport_number: str = body_data.get('passport_number', '')
            full_name: str = body_data.get('full_name', '')
            
            return {
                'statusCode': 200,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({
                    'success': True,
                    'verified': True,
                    'message': '–ü–∞—Å–ø–æ—Ä—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏',
                    'trust_score': 100,
                    'badge': 'verified_by_government'
                }),
                'isBase64Encoded': False
            }
        
        elif action == 'sms_send':
            phone: str = body_data.get('phone', '')
            generated_code = str(random.randint(100000, 999999))
            sms_codes[phone] = generated_code
            
            return {
                'statusCode': 200,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({
                    'success': True,
                    'message': f'SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone}',
                    'code_for_testing': generated_code
                }),
                'isBase64Encoded': False
            }
        
        elif action == 'sms_verify':
            phone: str = body_data.get('phone', '')
            code: str = body_data.get('code', '')
            stored_code = sms_codes.get(phone, '')
            
            if code == stored_code:
                del sms_codes[phone]
                return {
                    'statusCode': 200,
                    'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                    'body': json.dumps({
                        'success': True,
                        'verified': True,
                        'message': '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω'
                    }),
                    'isBase64Encoded': False
                }
            else:
                return {
                    'statusCode': 400,
                    'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                    'body': json.dumps({
                        'success': False,
                        'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'
                    }),
                    'isBase64Encoded': False
                }
        
        elif action == 'email_send':
            email: str = body_data.get('email', '')
            generated_code = str(random.randint(100000, 999999))
            
            success = send_email_code(email, generated_code)
            
            if success:
                email_codes[email] = {
                    'code': generated_code,
                    'expires_at': time.time() + 600
                }
                return {
                    'statusCode': 200,
                    'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                    'body': json.dumps({
                        'success': True,
                        'message': f'Email –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}',
                        'code_for_testing': generated_code
                    }),
                    'isBase64Encoded': False
                }
            else:
                return {
                    'statusCode': 500,
                    'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                    'body': json.dumps({
                        'success': False,
                        'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.'
                    }),
                    'isBase64Encoded': False
                }
        
        elif action == 'email_verify':
            email: str = body_data.get('email', '')
            code: str = body_data.get('code', '')
            
            if email not in email_codes:
                return {
                    'statusCode': 400,
                    'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                    'body': json.dumps({
                        'success': False,
                        'error': '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫'
                    }),
                    'isBase64Encoded': False
                }
            
            stored_data = email_codes[email]
            
            if time.time() > stored_data['expires_at']:
                del email_codes[email]
                return {
                    'statusCode': 400,
                    'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                    'body': json.dumps({
                        'success': False,
                        'error': '–ö–æ–¥ –∏—Å—Ç—ë–∫'
                    }),
                    'isBase64Encoded': False
                }
            
            if code == stored_data['code']:
                del email_codes[email]
                return {
                    'statusCode': 200,
                    'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                    'body': json.dumps({
                        'success': True,
                        'verified': True,
                        'message': 'Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω'
                    }),
                    'isBase64Encoded': False
                }
            else:
                return {
                    'statusCode': 400,
                    'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                    'body': json.dumps({
                        'success': False,
                        'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'
                    }),
                    'isBase64Encoded': False
                }
        
        elif action == 'generate_jwt':
            user_id: str = body_data.get('user_id', '')
            mock_jwt = f"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.{hashlib.sha256(user_id.encode()).hexdigest()[:32]}"
            
            return {
                'statusCode': 200,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({
                    'success': True,
                    'access_token': mock_jwt,
                    'expires_in': 900,
                    'refresh_token': f"refresh_{hashlib.sha256((user_id + str(time.time())).encode()).hexdigest()[:32]}"
                }),
                'isBase64Encoded': False
            }
        
        elif action == 'encrypt':
            data: str = body_data.get('data', '')
            encrypted = hashlib.sha256(data.encode()).hexdigest()
            
            return {
                'statusCode': 200,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({
                    'success': True,
                    'encrypted_data': encrypted,
                    'algorithm': 'SHA-256'
                }),
                'isBase64Encoded': False
            }
        
        elif action == 'check_login_block':
            user_id: str = body_data.get('user_id', '')
            check_result = check_login_attempts(user_id)
            
            return {
                'statusCode': 200 if not check_result['blocked'] else 403,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps(check_result),
                'isBase64Encoded': False
            }
        
        elif action == 'record_failed_login':
            user_id: str = body_data.get('user_id', '')
            email: str = body_data.get('email', '')
            is_blocked = record_failed_login(user_id)
            
            attempts_left = 5 - failed_login_attempts.get(user_id, {}).get('count', 0)
            
            response_data = {
                'success': True,
                'attempts_left': max(0, attempts_left),
                'message': f'–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {max(0, attempts_left)}'
            }
            
            if is_blocked and email:
                reset_token = generate_reset_token(email)
                response_data['blocked'] = True
                response_data['reset_token_for_testing'] = reset_token
                response_data['message'] = '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ 5 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.'
            
            return {
                'statusCode': 200,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps(response_data),
                'isBase64Encoded': False
            }
        
        elif action == 'request_password_reset':
            email: str = body_data.get('email', '')
            reset_token = generate_reset_token(email)
            
            return {
                'statusCode': 200,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({
                    'success': True,
                    'message': f'–°—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ {email}',
                    'reset_token_for_testing': reset_token
                }),
                'isBase64Encoded': False
            }
        
        elif action == 'verify_reset_token':
            token: str = body_data.get('token', '')
            verification = verify_reset_token(token)
            
            return {
                'statusCode': 200 if verification['valid'] else 400,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps(verification),
                'isBase64Encoded': False
            }
        
        elif action == 'reset_password':
            token: str = body_data.get('token', '')
            new_password: str = body_data.get('new_password', '')
            user_id: str = body_data.get('user_id', '')
            
            verification = verify_reset_token(token)
            if not verification['valid']:
                return {
                    'statusCode': 400,
                    'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                    'body': json.dumps(verification),
                    'isBase64Encoded': False
                }
            
            unlock_account(user_id)
            if token in reset_tokens:
                del reset_tokens[token]
            
            return {
                'statusCode': 200,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({
                    'success': True,
                    'message': '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω. –ê–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.'
                }),
                'isBase64Encoded': False
            }
    
    return {
        'statusCode': 405,
        'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
        'body': json.dumps({'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}),
        'isBase64Encoded': False
    }